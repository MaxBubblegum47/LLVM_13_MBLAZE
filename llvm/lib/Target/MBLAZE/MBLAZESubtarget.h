//===- MBLAZESubtarget.h - Define Subtarget for the MBLAZE ------------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file declares the MBLAZE specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_MBLAZE_MBLAZESUBTARGET_H
#define LLVM_LIB_TARGET_MBLAZE_MBLAZESUBTARGET_H

#include "MBLAZEFrameLowering.h"
#include "MBLAZEISelLowering.h"
#include "MBLAZEInstrInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "MBLAZEGenSubtargetInfo.inc"

namespace llvm {

class StringRef;
class TargetMachine;

class MBLAZESubtarget : public MBLAZEGenSubtargetInfo {
//   bool Xnorm = false;

//   virtual void anchor();
//   MBLAZEInstrInfo InstrInfo;


public:
  /// This constructor initializes the data members to match that
  /// of the specified triple.
  MBLAZESubtarget(const Triple &TT, const std::string &CPU, const std::string &FS,
               const TargetMachine &TM);

  /// Parses features string setting specified subtarget options.
  /// Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);

//   const MBLAZEInstrInfo *getInstrInfo() const override { return &InstrInfo; }
//   const MBLAZEFrameLowering *getFrameLowering() const override {
//     return &FrameLowering;
//   }
// //   const MBLAZETargetLowering *getTargetLowering() const override {
// //     return &TLInfo;
//   }
//   const MBLAZERegisterInfo *getRegisterInfo() const override {
//     return &InstrInfo.getRegisterInfo();
//   }
//   const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
//     return &TSInfo;
//   }

//   bool hasNorm() const { return Xnorm; }
};

} // end namespace llvm

#endif // LLVM_LIB_TARGET_MBLAZE_MBLAZESUBTARGET_H
