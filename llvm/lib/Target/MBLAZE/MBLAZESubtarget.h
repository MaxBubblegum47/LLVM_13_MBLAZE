//===-- MBLAZESubtarget.h - Define Subtarget for the MBLAZE -------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file declares the MBLAZE specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_MBLAZE_MBLAZESUBTARGET_H
#define LLVM_LIB_TARGET_MBLAZE_MBLAZESUBTARGET_H


#include "llvm/ADT/Triple.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "MBLAZEGenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class MBLAZESubtarget : public MBLAZEGenSubtargetInfo {
  Triple TargetTriple;
  virtual void anchor();
//   bool UseSoftMulDiv;
//   bool IsV9;
//   bool IsLeon;
//   bool V8DeprecatedInsts;
//   bool IsVIS, IsVIS2, IsVIS3;
//   bool Is64Bit;
//   bool HasHardQuad;
//   bool UsePopc;
//   bool UseSoftFloat;
//   bool HasNoFSMULD;
//   bool HasNoFMULS;

  // LEON features
//   bool HasUmacSmac;
//   bool HasLeonCasa;
//   bool HasPWRPSR;
//   bool InsertNOPLoad;
//   bool FixAllFDIVSQRT;
//   bool DetectRoundChange;
//   bool HasLeonCycleCounter;

//   MBLAZEInstrInfo InstrInfo;
//   MBLAZETargetLowering TLInfo;
//   SelectionDAGTargetInfo TSInfo;
//   MBLAZEFrameLowering FrameLowering;

public:
  MBLAZESubtarget(const Triple &TT, const std::string &CPU,
                 const std::string &FS);

//   const MBLAZEInstrInfo *getInstrInfo() const override { return &InstrInfo; }
//   const TargetFrameLowering *getFrameLowering() const override {
//     return &FrameLowering;
//   }
//   const MBLAZERegisterInfo *getRegisterInfo() const override {
//     return &InstrInfo.getRegisterInfo();
//   }
//   const MBLAZETargetLowering *getTargetLowering() const override {
//     return &TLInfo;
//   }
//   const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
//     return &TSInfo;
//   }

//   bool useSoftMulDiv() const { return UseSoftMulDiv; }
//   bool isV9() const { return IsV9; }
//   bool isLeon() const { return IsLeon; }
//   bool isVIS() const { return IsVIS; }
//   bool isVIS2() const { return IsVIS2; }
//   bool isVIS3() const { return IsVIS3; }
//   bool useDeprecatedV8Instructions() const { return V8DeprecatedInsts; }
//   bool hasHardQuad() const { return HasHardQuad; }
//   bool usePopc() const { return UsePopc; }
//   bool useSoftFloat() const { return UseSoftFloat; }
//   bool hasNoFSMULD() const { return HasNoFSMULD; }
//   bool hasNoFMULS() const { return HasNoFMULS; }

//   // Leon options
//   bool hasUmacSmac() const { return HasUmacSmac; }
//   bool hasLeonCasa() const { return HasLeonCasa; }
//   bool hasPWRPSR() const { return HasPWRPSR; }
//   bool insertNOPLoad() const { return InsertNOPLoad; }
//   bool fixAllFDIVSQRT() const { return FixAllFDIVSQRT; }
//   bool detectRoundChange() const { return DetectRoundChange; }
//   bool hasLeonCycleCounter() const { return HasLeonCycleCounter; }

  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);
  MBLAZESubtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS);

//   bool is64Bit() const { return Is64Bit; }

  /// The 64-bit ABI uses biased stack and frame pointers, so the stack frame
  /// of the current function is the area from [%sp+BIAS] to [%fp+BIAS].
//   int64_t getStackPointerBias() const {
//     return is64Bit() ? 2047 : 0;
//   }

  /// Given a actual stack size as determined by FrameInfo, this function
  /// returns adjusted framesize which includes space for register window
  /// spills and arguments.

};

} // end namespace llvm

#endif
