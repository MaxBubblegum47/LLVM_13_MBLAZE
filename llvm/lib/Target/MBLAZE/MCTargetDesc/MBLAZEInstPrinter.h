//= MBLAZEInstPrinter.h - Convert MBLAZE MCInst to assembly syntax -*- C++ -*-//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This class prints a MBLAZE MCInst to a .s file.
//
//===----------------------------------------------------------------------===//

#ifndef MBLAZEINSTPRINTER_H
#define MBLAZEINSTPRINTER_H

#include "llvm/MC/MCInstPrinter.h"

namespace llvm {
  //class MCOperand;

  class MBLAZEInstPrinter : public MCInstPrinter {
  public:
    MBLAZEInstPrinter(const MCAsmInfo &MAI, const MCInstrInfo &MII,
                      const MCRegisterInfo &MRI)
      : MCInstPrinter(MAI, MII, MRI) {}

//=================================================
// std::pair<const char *, uint64_t> getMnemonic(const MCInst *MI) override;
//   void printInstruction(const MCInst *MI, uint64_t Address, raw_ostream &O);
//   static const char *getRegisterName(unsigned RegNo);

//   void printRegName(raw_ostream &OS, unsigned RegNo) const override;
  void printInst(const MCInst *MI, uint64_t Address, StringRef Annot,
                 const MCSubtargetInfo &STI, raw_ostream &O) override;
//   void printCCOperand(const MCInst *MI, int OpNum, raw_ostream &O);
//   void printU6(const MCInst *MI, int OpNum, raw_ostream &O);

// private:
//   void printMemOperandRI(const MCInst *MI, unsigned OpNum, raw_ostream &O);
//   void printOperand(const MCInst *MI, unsigned OpNum, raw_ostream &O);
//   void printOperand(const MCInst *MI, uint64_t /*Address*/, unsigned OpNum,
//                     raw_ostream &O) {
//     printOperand(MI, OpNum, O);
//   }
//   void printPredicateOperand(const MCInst *MI, unsigned OpNum, raw_ostream &O);
//   void printBRCCPredicateOperand(const MCInst *MI, unsigned OpNum,
//                                  raw_ostream &O);
//   void printU6ShiftedBy(unsigned ShiftBy, const MCInst *MI, int OpNum,
//                         raw_ostream &O);
//=======================================




    // virtual void printInst(const MCInst *MI, raw_ostream &O, StringRef Annot);

    // Autogenerated by tblgen OLD
    void printInstruction(const MCInst *MI, raw_ostream &O);
    static const char *getRegisterName(unsigned RegNo);

    void printOperand(const MCInst *MI, unsigned OpNo, raw_ostream &O,
                      const char *Modifier = 0);
    void printFSLImm(const MCInst *MI, int OpNo, raw_ostream &O);
    void printUnsignedImm(const MCInst *MI, int OpNo, raw_ostream &O);
    void printMemOperand(const MCInst *MI, int OpNo,raw_ostream &O,
                         const char *Modifier = 0);

    // Autogenerated by tblgen NEW
    // Autogenerated by tblgen.
  std::pair<const char *, uint64_t> getMnemonic(const MCInst *MI) override;
  void printInstruction(const MCInst *MI, uint64_t Address, raw_ostream &O);
//   static const char *getRegisterName(unsigned RegNo);

//   void printRegName(raw_ostream &OS, unsigned RegNo) const override;
//   void printInst(const MCInst *MI, uint64_t Address, StringRef Annot,
//                  const MCSubtargetInfo &STI, raw_ostream &O) override;
//   void printCCOperand(const MCInst *MI, int OpNum, raw_ostream &O);
//   void printU6(const MCInst *MI, int OpNum, raw_ostream &O);

// private:
//   void printMemOperandRI(const MCInst *MI, unsigned OpNum, raw_ostream &O);
//   void printOperand(const MCInst *MI, unsigned OpNum, raw_ostream &O);
//   void printOperand(const MCInst *MI, uint64_t /*Address*/, unsigned OpNum,
//                     raw_ostream &O) {
//     printOperand(MI, OpNum, O);
//   }
//   void printPredicateOperand(const MCInst *MI, unsigned OpNum, raw_ostream &O);
//   void printBRCCPredicateOperand(const MCInst *MI, unsigned OpNum,
//                                  raw_ostream &O);
//   void printU6ShiftedBy(unsigned ShiftBy, const MCInst *MI, int OpNum,
//                         raw_ostream &O);

  };
}

#endif